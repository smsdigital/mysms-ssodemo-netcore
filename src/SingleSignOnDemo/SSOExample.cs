using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Sodium;
using System.Web;
using Microsoft.AspNetCore.Http;
using System.Text;
using System.Net;
using System.IO;
using System.Security.Cryptography;

namespace SingleSignOnDemo
{
    public class SSOExample
    {
        /// <summary>
        /// URL der SSO-API.
        /// Base URL for the SSO API.
        /// URL de l'API d'authentification unique.
        /// </summary>
        private const string SSO_BASE_URL = "https://api.my.sms-group.com";

        /// <summary>
        /// Der Produktname, der zur Authentifizierung der SSO-Anfrage verwendet wird.
        /// The product name for authenticating the SSO call.
        /// Le nom du produit utilisé pour authentifier la demande de l'authentification unique.
        /// </summary>
        private const string PRODUCT_NAME = "sms-app-sso-test";

        /// <summary>
        /// Der öffentliche Schlüssel der Plattform (wird von SMS digital bereitgestellt). 
        /// The public key of the platform (provided by SMS digital).
        /// La clé publique de la plate-forme (fourni par SMS digital).
        /// </summary>
        private const string PLATFORM_PUBLIC_KEY = "sQsT5C+Bst2i+hbBZIrBroHhDy7LopgFwUR9PFprans=";

        /// <summary>
        /// Der private Schlüssel der Anwendung (vom Anwendungsentwickler generiert).
        /// The private key of the application (generated by the application developer).
        /// La clé privée de l'application (généré par le promoteur de l'application).
        /// </summary>
        private const string APPLICATION_PRIVATE_KEY = "I2D6BWycz+bNWkcS1ul820uK5Jx1qGvsRfilDy09o94=";

        public SSOExample()
        {
            // Keine Initialisierung notwendig.
            // No initialization needed.
            // Aucun besoin d'initialisation.
        }

        /// <summary>
        /// Führt einen Login-Prozess mit dem übergebenen Token durch.
        /// Executes the login process with the given token.
        /// Executer le procès d'authentification avec le jeton donné.
        /// </summary>
        /// <param name="token">Das Token, das für den Login verwendet werden soll. The token used to execute the login process. Le signe utilisé pour executer le procès d'authentification.</param>
        /// <returns></returns>
        public static bool Login(string token)
        {
            try
            {
                // Eine Nonce erstellen, um ein Box-Objekt erstellen zu können.
                // Create a nonce used to create a Box object.
                // Créer un nonce utilisé pour créer un objet Box.
                byte[] nonce = PublicKeyBox.GenerateNonce();

                // Einen 64 Byte großen Puffer erstellen und ihn mit zufälligen Bytes füllen.
                // Create a 64-byte buffer array and fill it with random bytes.
                // Créer un tableau tampon de 64 octets et remplisser-le avec des octets aléatoires.
                byte[] buffer = new byte[64];
                new Random().NextBytes(buffer);

                // Ein Box-Object erzeugen, die zur Kommunikation mit mySMS unter Verwendung des öffentlichen und privaten Schlüssels dient.
                // Create a Box object to communicate with mySMS using the public and private key.
                // Créer un object Box pour communiquer avec mySMS en utilisant les clés publique et privée.
                byte[] encrypted = PublicKeyBox.Create(buffer, nonce, Convert.FromBase64String(APPLICATION_PRIVATE_KEY), Convert.FromBase64String(PLATFORM_PUBLIC_KEY));

                // Nonce und verschlüsselten Text aneinanderreihen und in einen Base64-String umwandeln.
                // Concatenate the nonce and the encrypted text and convert it to a base64 string.
                // Concaténer le nonce et le texte chiffré et convertisser-le en chaîne base64.
                byte[] payload = nonce.Concat(encrypted).ToArray();
                string base64 = Convert.ToBase64String(payload, Base64FormattingOptions.None);

                // Eine HTTP-Anfrage an die Plattform senden.
                // Send an HTTP request to the platform.
                // Envoyer une requête HTTP à la plate-forme.
                string sso_url = string.Format("{0}/auth/lookup/{1}", SSO_BASE_URL, token);
                HttpWebRequest req = WebRequest.CreateHttp(sso_url);
                req.Headers.Add("Authorization", string.Format("PRODUCTAUTH {0}:{1}", PRODUCT_NAME, base64));

                // Die Antwort empfangen und verarbeiten
                // Receive and proceed the response.
                // Recever et passer la réponse.
                HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                if (!(resp.StatusCode == HttpStatusCode.OK))
                    return false;

                using (MemoryStream ms = new MemoryStream())
                {
                    resp.GetResponseStream().CopyTo(ms);
                    resp.Close();

                    // Die Antwort enthält die 24 Byte lange Nonce und die verschlüsselten Benutzerdaten.
                    // The response contains the nonce with a size of 24 bytes and the encrypted user data.
                    // La réponse contient la nonce avec un longueur de 24 octets et les données d'utilisateur cryptées.
                    byte[] encr_nonce = ms.ToArray().Take(24).ToArray();
                    byte[] encr_data = ms.ToArray().Skip(24).ToArray();
                    byte[] decrypted = PublicKeyBox.Open(encr_data, encr_nonce, Convert.FromBase64String(APPLICATION_PRIVATE_KEY), Convert.FromBase64String(PLATFORM_PUBLIC_KEY));
                }

                return true;
            }
            // Fängt WebException-Objekte auf, die auftreten, wenn die HTTP-Anfrage ungültig ist oder nicht verarbeitet werden kann.
            // Catches WebException objects thrown if the HTTP request is invalid or cannot be proceeded.
            // Attrape les objets WebException levés si la demande HTTP n'est pas valide ou ne peut pas être poursuivie.
            catch (WebException ex)
            {
                Console.WriteLine("Error communicating with mySMS: " + ex.Message);
                return false;
            }
            // Fängt CryptographicException-Objekte auf, die auftreten, wenn die Ver- oder Entschlüsselung fehlschlägt.
            // Catches CryptographicException objects thrown if the encryption or decryption fails.
            // Attrape les objets CryptographicException levés si le chiffrement ou le déchiffrement échoue.
            catch (CryptographicException ex)
            {
                Console.WriteLine("Error encrypting or decrypting data: " + ex.Message);
                return false;
            }
            // Fängt alle anderen Exception-Objekte auf, die nicht von einem der oberen beiden Typen sind.
            // Catches any other Exception that is not of one of the above types.
            // Attrape toute autre exception qui n'est pas de l'un des types ci-dessus.
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return false;
            }
        }
    }
}
